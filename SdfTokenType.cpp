// This file was automatically generated by EbnfStudio; don't modify it!
#include "SdfTokenType.h"

namespace Sdf {
	const char* tokenTypeString( int r ) {
		switch(r) {
			case Tok_Invalid: return "<invalid>";
			case Tok_Bang: return "!";
			case Tok_BangEq: return "!=";
			case Tok_Bang2Eq: return "!==";
			case Tok_Percent: return "%";
			case Tok_Amp: return "&";
			case Tok_2Amp: return "&&";
			case Tok_Lpar: return "(";
			case Tok_Rpar: return ")";
			case Tok_Star: return "*";
			case Tok_Rcmt: return "*/";
			case Tok_Plus: return "+";
			case Tok_Comma: return ",";
			case Tok_Minus: return "-";
			case Tok_Dot: return ".";
			case Tok_Slash: return "/";
			case Tok_Lcmt: return "/*";
			case Tok_2Slash: return "//";
			case Tok_Colon: return ":";
			case Tok_Lt: return "<";
			case Tok_2Lt: return "<<";
			case Tok_Leq: return "<=";
			case Tok_2Eq: return "==";
			case Tok_3Eq: return "===";
			case Tok_Gt: return ">";
			case Tok_Geq: return ">=";
			case Tok_2Gt: return ">>";
			case Tok_Qmark: return "?";
			case Tok_Lbrack: return "[";
			case Tok_Rbrack: return "]";
			case Tok_Hat: return "^";
			case Tok_HatTilde: return "^~";
			case Tok_Bar: return "|";
			case Tok_2Bar: return "||";
			case Tok_Tilde: return "~";
			case Tok_TildeAmp: return "~&";
			case Tok_TildeHat: return "~^";
			case Tok_TildeBar: return "~|";
			case Tok_ABSOLUTE: return "ABSOLUTE";
			case Tok_ARRIVAL: return "ARRIVAL";
			case Tok_BIDIRECTSKEW: return "BIDIRECTSKEW";
			case Tok_CCOND: return "CCOND";
			case Tok_CELL: return "CELL";
			case Tok_CELLTYPE: return "CELLTYPE";
			case Tok_COND: return "COND";
			case Tok_CONDELSE: return "CONDELSE";
			case Tok_DATE: return "DATE";
			case Tok_DELAY: return "DELAY";
			case Tok_DELAYFILE: return "DELAYFILE";
			case Tok_DEPARTURE: return "DEPARTURE";
			case Tok_DESIGN: return "DESIGN";
			case Tok_DEVICE: return "DEVICE";
			case Tok_DIFF: return "DIFF";
			case Tok_DIVIDER: return "DIVIDER";
			case Tok_EXCEPTION: return "EXCEPTION";
			case Tok_HOLD: return "HOLD";
			case Tok_INCREMENT: return "INCREMENT";
			case Tok_INSTANCE: return "INSTANCE";
			case Tok_INTERCONNECT: return "INTERCONNECT";
			case Tok_IOPATH: return "IOPATH";
			case Tok_LABEL: return "LABEL";
			case Tok_NAME: return "NAME";
			case Tok_NETDELAY: return "NETDELAY";
			case Tok_NOCHANGE: return "NOCHANGE";
			case Tok_PATHCONSTRAINT: return "PATHCONSTRAINT";
			case Tok_PATHPULSE: return "PATHPULSE";
			case Tok_PATHPULSEPERCENT: return "PATHPULSEPERCENT";
			case Tok_PERIOD: return "PERIOD";
			case Tok_PERIODCONSTRAINT: return "PERIODCONSTRAINT";
			case Tok_PORT: return "PORT";
			case Tok_PROCESS: return "PROCESS";
			case Tok_PROGRAM: return "PROGRAM";
			case Tok_RECOVERY: return "RECOVERY";
			case Tok_RECREM: return "RECREM";
			case Tok_REMOVAL: return "REMOVAL";
			case Tok_RETAIN: return "RETAIN";
			case Tok_SCOND: return "SCOND";
			case Tok_SDFVERSION: return "SDFVERSION";
			case Tok_SETUP: return "SETUP";
			case Tok_SETUPHOLD: return "SETUPHOLD";
			case Tok_SKEW: return "SKEW";
			case Tok_SKEWCONSTRAINT: return "SKEWCONSTRAINT";
			case Tok_SLACK: return "SLACK";
			case Tok_SUM: return "SUM";
			case Tok_TEMPERATURE: return "TEMPERATURE";
			case Tok_TIMESCALE: return "TIMESCALE";
			case Tok_TIMINGCHECK: return "TIMINGCHECK";
			case Tok_TIMINGENV: return "TIMINGENV";
			case Tok_VENDOR: return "VENDOR";
			case Tok_VERSION: return "VERSION";
			case Tok_VOLTAGE: return "VOLTAGE";
			case Tok_WAVEFORM: return "WAVEFORM";
			case Tok_WIDTH: return "WIDTH";
			case Tok_negedge: return "negedge";
			case Tok_posedge: return "posedge";
			case Tok_Ident: return "Ident";
			case Tok_Int: return "Int";
			case Tok_Str: return "Str";
			case Tok_Real: return "Real";
			case Tok_Comment: return "Comment";
			case Tok_Eof: return "<eof>";
			default: return "";
		}
	}
	const char* tokenTypeName( int r ) {
		switch(r) {
			case Tok_Invalid: return "Tok_Invalid";
			case Tok_Bang: return "Tok_Bang";
			case Tok_BangEq: return "Tok_BangEq";
			case Tok_Bang2Eq: return "Tok_Bang2Eq";
			case Tok_Percent: return "Tok_Percent";
			case Tok_Amp: return "Tok_Amp";
			case Tok_2Amp: return "Tok_2Amp";
			case Tok_Lpar: return "Tok_Lpar";
			case Tok_Rpar: return "Tok_Rpar";
			case Tok_Star: return "Tok_Star";
			case Tok_Rcmt: return "Tok_Rcmt";
			case Tok_Plus: return "Tok_Plus";
			case Tok_Comma: return "Tok_Comma";
			case Tok_Minus: return "Tok_Minus";
			case Tok_Dot: return "Tok_Dot";
			case Tok_Slash: return "Tok_Slash";
			case Tok_Lcmt: return "Tok_Lcmt";
			case Tok_2Slash: return "Tok_2Slash";
			case Tok_Colon: return "Tok_Colon";
			case Tok_Lt: return "Tok_Lt";
			case Tok_2Lt: return "Tok_2Lt";
			case Tok_Leq: return "Tok_Leq";
			case Tok_2Eq: return "Tok_2Eq";
			case Tok_3Eq: return "Tok_3Eq";
			case Tok_Gt: return "Tok_Gt";
			case Tok_Geq: return "Tok_Geq";
			case Tok_2Gt: return "Tok_2Gt";
			case Tok_Qmark: return "Tok_Qmark";
			case Tok_Lbrack: return "Tok_Lbrack";
			case Tok_Rbrack: return "Tok_Rbrack";
			case Tok_Hat: return "Tok_Hat";
			case Tok_HatTilde: return "Tok_HatTilde";
			case Tok_Bar: return "Tok_Bar";
			case Tok_2Bar: return "Tok_2Bar";
			case Tok_Tilde: return "Tok_Tilde";
			case Tok_TildeAmp: return "Tok_TildeAmp";
			case Tok_TildeHat: return "Tok_TildeHat";
			case Tok_TildeBar: return "Tok_TildeBar";
			case Tok_ABSOLUTE: return "Tok_ABSOLUTE";
			case Tok_ARRIVAL: return "Tok_ARRIVAL";
			case Tok_BIDIRECTSKEW: return "Tok_BIDIRECTSKEW";
			case Tok_CCOND: return "Tok_CCOND";
			case Tok_CELL: return "Tok_CELL";
			case Tok_CELLTYPE: return "Tok_CELLTYPE";
			case Tok_COND: return "Tok_COND";
			case Tok_CONDELSE: return "Tok_CONDELSE";
			case Tok_DATE: return "Tok_DATE";
			case Tok_DELAY: return "Tok_DELAY";
			case Tok_DELAYFILE: return "Tok_DELAYFILE";
			case Tok_DEPARTURE: return "Tok_DEPARTURE";
			case Tok_DESIGN: return "Tok_DESIGN";
			case Tok_DEVICE: return "Tok_DEVICE";
			case Tok_DIFF: return "Tok_DIFF";
			case Tok_DIVIDER: return "Tok_DIVIDER";
			case Tok_EXCEPTION: return "Tok_EXCEPTION";
			case Tok_HOLD: return "Tok_HOLD";
			case Tok_INCREMENT: return "Tok_INCREMENT";
			case Tok_INSTANCE: return "Tok_INSTANCE";
			case Tok_INTERCONNECT: return "Tok_INTERCONNECT";
			case Tok_IOPATH: return "Tok_IOPATH";
			case Tok_LABEL: return "Tok_LABEL";
			case Tok_NAME: return "Tok_NAME";
			case Tok_NETDELAY: return "Tok_NETDELAY";
			case Tok_NOCHANGE: return "Tok_NOCHANGE";
			case Tok_PATHCONSTRAINT: return "Tok_PATHCONSTRAINT";
			case Tok_PATHPULSE: return "Tok_PATHPULSE";
			case Tok_PATHPULSEPERCENT: return "Tok_PATHPULSEPERCENT";
			case Tok_PERIOD: return "Tok_PERIOD";
			case Tok_PERIODCONSTRAINT: return "Tok_PERIODCONSTRAINT";
			case Tok_PORT: return "Tok_PORT";
			case Tok_PROCESS: return "Tok_PROCESS";
			case Tok_PROGRAM: return "Tok_PROGRAM";
			case Tok_RECOVERY: return "Tok_RECOVERY";
			case Tok_RECREM: return "Tok_RECREM";
			case Tok_REMOVAL: return "Tok_REMOVAL";
			case Tok_RETAIN: return "Tok_RETAIN";
			case Tok_SCOND: return "Tok_SCOND";
			case Tok_SDFVERSION: return "Tok_SDFVERSION";
			case Tok_SETUP: return "Tok_SETUP";
			case Tok_SETUPHOLD: return "Tok_SETUPHOLD";
			case Tok_SKEW: return "Tok_SKEW";
			case Tok_SKEWCONSTRAINT: return "Tok_SKEWCONSTRAINT";
			case Tok_SLACK: return "Tok_SLACK";
			case Tok_SUM: return "Tok_SUM";
			case Tok_TEMPERATURE: return "Tok_TEMPERATURE";
			case Tok_TIMESCALE: return "Tok_TIMESCALE";
			case Tok_TIMINGCHECK: return "Tok_TIMINGCHECK";
			case Tok_TIMINGENV: return "Tok_TIMINGENV";
			case Tok_VENDOR: return "Tok_VENDOR";
			case Tok_VERSION: return "Tok_VERSION";
			case Tok_VOLTAGE: return "Tok_VOLTAGE";
			case Tok_WAVEFORM: return "Tok_WAVEFORM";
			case Tok_WIDTH: return "Tok_WIDTH";
			case Tok_negedge: return "Tok_negedge";
			case Tok_posedge: return "Tok_posedge";
			case Tok_Ident: return "Tok_Ident";
			case Tok_Int: return "Tok_Int";
			case Tok_Str: return "Tok_Str";
			case Tok_Real: return "Tok_Real";
			case Tok_Comment: return "Tok_Comment";
			case Tok_Eof: return "Tok_Eof";
			default: return "";
		}
	}
	bool tokenTypeIsLiteral( int r ) {
		return r > TT_Literals && r < TT_Keywords;
	}
	bool tokenTypeIsKeyword( int r ) {
		return r > TT_Keywords && r < TT_Specials;
	}
	bool tokenTypeIsSpecial( int r ) {
		return r > TT_Specials && r < TT_Max;
	}
	static inline char at( const QByteArray& str, int i ){
		return ( i >= 0 && i < str.size() ? str[i] : 0 );
	}
	TokenType tokenTypeFromString( const QByteArray& str, int* pos ) {
		int i = ( pos != 0 ? *pos: 0 );
		TokenType res = Tok_Invalid;
		switch( at(str,i) ){
		case '!':
			if( at(str,i+1) == '=' ){
				if( at(str,i+2) == '=' ){
					res = Tok_Bang2Eq; i += 3;
				} else {
					res = Tok_BangEq; i += 2;
				}
			} else {
				res = Tok_Bang; i += 1;
			}
			break;
		case '%':
			res = Tok_Percent; i += 1;
			break;
		case '&':
			if( at(str,i+1) == '&' ){
				res = Tok_2Amp; i += 2;
			} else {
				res = Tok_Amp; i += 1;
			}
			break;
		case '(':
			res = Tok_Lpar; i += 1;
			break;
		case ')':
			res = Tok_Rpar; i += 1;
			break;
		case '*':
			if( at(str,i+1) == '/' ){
				res = Tok_Rcmt; i += 2;
			} else {
				res = Tok_Star; i += 1;
			}
			break;
		case '+':
			res = Tok_Plus; i += 1;
			break;
		case ',':
			res = Tok_Comma; i += 1;
			break;
		case '-':
			res = Tok_Minus; i += 1;
			break;
		case '.':
			res = Tok_Dot; i += 1;
			break;
		case '/':
			switch( at(str,i+1) ){
			case '*':
				res = Tok_Lcmt; i += 2;
				break;
			case '/':
				res = Tok_2Slash; i += 2;
				break;
			default:
				res = Tok_Slash; i += 1;
				break;
			}
			break;
		case ':':
			res = Tok_Colon; i += 1;
			break;
		case '<':
			switch( at(str,i+1) ){
			case '<':
				res = Tok_2Lt; i += 2;
				break;
			case '=':
				res = Tok_Leq; i += 2;
				break;
			default:
				res = Tok_Lt; i += 1;
				break;
			}
			break;
		case '=':
			if( at(str,i+1) == '=' ){
				if( at(str,i+2) == '=' ){
					res = Tok_3Eq; i += 3;
				} else {
					res = Tok_2Eq; i += 2;
				}
			}
			break;
		case '>':
			switch( at(str,i+1) ){
			case '=':
				res = Tok_Geq; i += 2;
				break;
			case '>':
				res = Tok_2Gt; i += 2;
				break;
			default:
				res = Tok_Gt; i += 1;
				break;
			}
			break;
		case '?':
			res = Tok_Qmark; i += 1;
			break;
		case 'A':
			switch( at(str,i+1) ){
			case 'B':
				if( at(str,i+2) == 'S' ){
					if( at(str,i+3) == 'O' ){
						if( at(str,i+4) == 'L' ){
							if( at(str,i+5) == 'U' ){
								if( at(str,i+6) == 'T' ){
									if( at(str,i+7) == 'E' ){
										res = Tok_ABSOLUTE; i += 8;
									}
								}
							}
						}
					}
				}
				break;
			case 'R':
				if( at(str,i+2) == 'R' ){
					if( at(str,i+3) == 'I' ){
						if( at(str,i+4) == 'V' ){
							if( at(str,i+5) == 'A' ){
								if( at(str,i+6) == 'L' ){
									res = Tok_ARRIVAL; i += 7;
								}
							}
						}
					}
				}
				break;
			}
			break;
		case 'B':
			if( at(str,i+1) == 'I' ){
				if( at(str,i+2) == 'D' ){
					if( at(str,i+3) == 'I' ){
						if( at(str,i+4) == 'R' ){
							if( at(str,i+5) == 'E' ){
								if( at(str,i+6) == 'C' ){
									if( at(str,i+7) == 'T' ){
										if( at(str,i+8) == 'S' ){
											if( at(str,i+9) == 'K' ){
												if( at(str,i+10) == 'E' ){
													if( at(str,i+11) == 'W' ){
														res = Tok_BIDIRECTSKEW; i += 12;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			break;
		case 'C':
			switch( at(str,i+1) ){
			case 'C':
				if( at(str,i+2) == 'O' ){
					if( at(str,i+3) == 'N' ){
						if( at(str,i+4) == 'D' ){
							res = Tok_CCOND; i += 5;
						}
					}
				}
				break;
			case 'E':
				if( at(str,i+2) == 'L' ){
					if( at(str,i+3) == 'L' ){
						if( at(str,i+4) == 'T' ){
							if( at(str,i+5) == 'Y' ){
								if( at(str,i+6) == 'P' ){
									if( at(str,i+7) == 'E' ){
										res = Tok_CELLTYPE; i += 8;
									}
								}
							}
						} else {
							res = Tok_CELL; i += 4;
						}
					}
				}
				break;
			case 'O':
				if( at(str,i+2) == 'N' ){
					if( at(str,i+3) == 'D' ){
						if( at(str,i+4) == 'E' ){
							if( at(str,i+5) == 'L' ){
								if( at(str,i+6) == 'S' ){
									if( at(str,i+7) == 'E' ){
										res = Tok_CONDELSE; i += 8;
									}
								}
							}
						} else {
							res = Tok_COND; i += 4;
						}
					}
				}
				break;
			}
			break;
		case 'D':
			switch( at(str,i+1) ){
			case 'A':
				if( at(str,i+2) == 'T' ){
					if( at(str,i+3) == 'E' ){
						res = Tok_DATE; i += 4;
					}
				}
				break;
			case 'E':
				switch( at(str,i+2) ){
				case 'L':
					if( at(str,i+3) == 'A' ){
						if( at(str,i+4) == 'Y' ){
							if( at(str,i+5) == 'F' ){
								if( at(str,i+6) == 'I' ){
									if( at(str,i+7) == 'L' ){
										if( at(str,i+8) == 'E' ){
											res = Tok_DELAYFILE; i += 9;
										}
									}
								}
							} else {
								res = Tok_DELAY; i += 5;
							}
						}
					}
					break;
				case 'P':
					if( at(str,i+3) == 'A' ){
						if( at(str,i+4) == 'R' ){
							if( at(str,i+5) == 'T' ){
								if( at(str,i+6) == 'U' ){
									if( at(str,i+7) == 'R' ){
										if( at(str,i+8) == 'E' ){
											res = Tok_DEPARTURE; i += 9;
										}
									}
								}
							}
						}
					}
					break;
				case 'S':
					if( at(str,i+3) == 'I' ){
						if( at(str,i+4) == 'G' ){
							if( at(str,i+5) == 'N' ){
								res = Tok_DESIGN; i += 6;
							}
						}
					}
					break;
				case 'V':
					if( at(str,i+3) == 'I' ){
						if( at(str,i+4) == 'C' ){
							if( at(str,i+5) == 'E' ){
								res = Tok_DEVICE; i += 6;
							}
						}
					}
					break;
				}
				break;
			case 'I':
				switch( at(str,i+2) ){
				case 'F':
					if( at(str,i+3) == 'F' ){
						res = Tok_DIFF; i += 4;
					}
					break;
				case 'V':
					if( at(str,i+3) == 'I' ){
						if( at(str,i+4) == 'D' ){
							if( at(str,i+5) == 'E' ){
								if( at(str,i+6) == 'R' ){
									res = Tok_DIVIDER; i += 7;
								}
							}
						}
					}
					break;
				}
				break;
			}
			break;
		case 'E':
			if( at(str,i+1) == 'X' ){
				if( at(str,i+2) == 'C' ){
					if( at(str,i+3) == 'E' ){
						if( at(str,i+4) == 'P' ){
							if( at(str,i+5) == 'T' ){
								if( at(str,i+6) == 'I' ){
									if( at(str,i+7) == 'O' ){
										if( at(str,i+8) == 'N' ){
											res = Tok_EXCEPTION; i += 9;
										}
									}
								}
							}
						}
					}
				}
			}
			break;
		case 'H':
			if( at(str,i+1) == 'O' ){
				if( at(str,i+2) == 'L' ){
					if( at(str,i+3) == 'D' ){
						res = Tok_HOLD; i += 4;
					}
				}
			}
			break;
		case 'I':
			switch( at(str,i+1) ){
			case 'N':
				switch( at(str,i+2) ){
				case 'C':
					if( at(str,i+3) == 'R' ){
						if( at(str,i+4) == 'E' ){
							if( at(str,i+5) == 'M' ){
								if( at(str,i+6) == 'E' ){
									if( at(str,i+7) == 'N' ){
										if( at(str,i+8) == 'T' ){
											res = Tok_INCREMENT; i += 9;
										}
									}
								}
							}
						}
					}
					break;
				case 'S':
					if( at(str,i+3) == 'T' ){
						if( at(str,i+4) == 'A' ){
							if( at(str,i+5) == 'N' ){
								if( at(str,i+6) == 'C' ){
									if( at(str,i+7) == 'E' ){
										res = Tok_INSTANCE; i += 8;
									}
								}
							}
						}
					}
					break;
				case 'T':
					if( at(str,i+3) == 'E' ){
						if( at(str,i+4) == 'R' ){
							if( at(str,i+5) == 'C' ){
								if( at(str,i+6) == 'O' ){
									if( at(str,i+7) == 'N' ){
										if( at(str,i+8) == 'N' ){
											if( at(str,i+9) == 'E' ){
												if( at(str,i+10) == 'C' ){
													if( at(str,i+11) == 'T' ){
														res = Tok_INTERCONNECT; i += 12;
													}
												}
											}
										}
									}
								}
							}
						}
					}
					break;
				}
				break;
			case 'O':
				if( at(str,i+2) == 'P' ){
					if( at(str,i+3) == 'A' ){
						if( at(str,i+4) == 'T' ){
							if( at(str,i+5) == 'H' ){
								res = Tok_IOPATH; i += 6;
							}
						}
					}
				}
				break;
			}
			break;
		case 'L':
			if( at(str,i+1) == 'A' ){
				if( at(str,i+2) == 'B' ){
					if( at(str,i+3) == 'E' ){
						if( at(str,i+4) == 'L' ){
							res = Tok_LABEL; i += 5;
						}
					}
				}
			}
			break;
		case 'N':
			switch( at(str,i+1) ){
			case 'A':
				if( at(str,i+2) == 'M' ){
					if( at(str,i+3) == 'E' ){
						res = Tok_NAME; i += 4;
					}
				}
				break;
			case 'E':
				if( at(str,i+2) == 'T' ){
					if( at(str,i+3) == 'D' ){
						if( at(str,i+4) == 'E' ){
							if( at(str,i+5) == 'L' ){
								if( at(str,i+6) == 'A' ){
									if( at(str,i+7) == 'Y' ){
										res = Tok_NETDELAY; i += 8;
									}
								}
							}
						}
					}
				}
				break;
			case 'O':
				if( at(str,i+2) == 'C' ){
					if( at(str,i+3) == 'H' ){
						if( at(str,i+4) == 'A' ){
							if( at(str,i+5) == 'N' ){
								if( at(str,i+6) == 'G' ){
									if( at(str,i+7) == 'E' ){
										res = Tok_NOCHANGE; i += 8;
									}
								}
							}
						}
					}
				}
				break;
			}
			break;
		case 'P':
			switch( at(str,i+1) ){
			case 'A':
				if( at(str,i+2) == 'T' ){
					if( at(str,i+3) == 'H' ){
						switch( at(str,i+4) ){
						case 'C':
							if( at(str,i+5) == 'O' ){
								if( at(str,i+6) == 'N' ){
									if( at(str,i+7) == 'S' ){
										if( at(str,i+8) == 'T' ){
											if( at(str,i+9) == 'R' ){
												if( at(str,i+10) == 'A' ){
													if( at(str,i+11) == 'I' ){
														if( at(str,i+12) == 'N' ){
															if( at(str,i+13) == 'T' ){
																res = Tok_PATHCONSTRAINT; i += 14;
															}
														}
													}
												}
											}
										}
									}
								}
							}
							break;
						case 'P':
							if( at(str,i+5) == 'U' ){
								if( at(str,i+6) == 'L' ){
									if( at(str,i+7) == 'S' ){
										if( at(str,i+8) == 'E' ){
											if( at(str,i+9) == 'P' ){
												if( at(str,i+10) == 'E' ){
													if( at(str,i+11) == 'R' ){
														if( at(str,i+12) == 'C' ){
															if( at(str,i+13) == 'E' ){
																if( at(str,i+14) == 'N' ){
																	if( at(str,i+15) == 'T' ){
																		res = Tok_PATHPULSEPERCENT; i += 16;
																	}
																}
															}
														}
													}
												}
											} else {
												res = Tok_PATHPULSE; i += 9;
											}
										}
									}
								}
							}
							break;
						}
					}
				}
				break;
			case 'E':
				if( at(str,i+2) == 'R' ){
					if( at(str,i+3) == 'I' ){
						if( at(str,i+4) == 'O' ){
							if( at(str,i+5) == 'D' ){
								if( at(str,i+6) == 'C' ){
									if( at(str,i+7) == 'O' ){
										if( at(str,i+8) == 'N' ){
											if( at(str,i+9) == 'S' ){
												if( at(str,i+10) == 'T' ){
													if( at(str,i+11) == 'R' ){
														if( at(str,i+12) == 'A' ){
															if( at(str,i+13) == 'I' ){
																if( at(str,i+14) == 'N' ){
																	if( at(str,i+15) == 'T' ){
																		res = Tok_PERIODCONSTRAINT; i += 16;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								} else {
									res = Tok_PERIOD; i += 6;
								}
							}
						}
					}
				}
				break;
			case 'O':
				if( at(str,i+2) == 'R' ){
					if( at(str,i+3) == 'T' ){
						res = Tok_PORT; i += 4;
					}
				}
				break;
			case 'R':
				if( at(str,i+2) == 'O' ){
					switch( at(str,i+3) ){
					case 'C':
						if( at(str,i+4) == 'E' ){
							if( at(str,i+5) == 'S' ){
								if( at(str,i+6) == 'S' ){
									res = Tok_PROCESS; i += 7;
								}
							}
						}
						break;
					case 'G':
						if( at(str,i+4) == 'R' ){
							if( at(str,i+5) == 'A' ){
								if( at(str,i+6) == 'M' ){
									res = Tok_PROGRAM; i += 7;
								}
							}
						}
						break;
					}
				}
				break;
			}
			break;
		case 'R':
			if( at(str,i+1) == 'E' ){
				switch( at(str,i+2) ){
				case 'C':
					switch( at(str,i+3) ){
					case 'O':
						if( at(str,i+4) == 'V' ){
							if( at(str,i+5) == 'E' ){
								if( at(str,i+6) == 'R' ){
									if( at(str,i+7) == 'Y' ){
										res = Tok_RECOVERY; i += 8;
									}
								}
							}
						}
						break;
					case 'R':
						if( at(str,i+4) == 'E' ){
							if( at(str,i+5) == 'M' ){
								res = Tok_RECREM; i += 6;
							}
						}
						break;
					}
					break;
				case 'M':
					if( at(str,i+3) == 'O' ){
						if( at(str,i+4) == 'V' ){
							if( at(str,i+5) == 'A' ){
								if( at(str,i+6) == 'L' ){
									res = Tok_REMOVAL; i += 7;
								}
							}
						}
					}
					break;
				case 'T':
					if( at(str,i+3) == 'A' ){
						if( at(str,i+4) == 'I' ){
							if( at(str,i+5) == 'N' ){
								res = Tok_RETAIN; i += 6;
							}
						}
					}
					break;
				}
			}
			break;
		case 'S':
			switch( at(str,i+1) ){
			case 'C':
				if( at(str,i+2) == 'O' ){
					if( at(str,i+3) == 'N' ){
						if( at(str,i+4) == 'D' ){
							res = Tok_SCOND; i += 5;
						}
					}
				}
				break;
			case 'D':
				if( at(str,i+2) == 'F' ){
					if( at(str,i+3) == 'V' ){
						if( at(str,i+4) == 'E' ){
							if( at(str,i+5) == 'R' ){
								if( at(str,i+6) == 'S' ){
									if( at(str,i+7) == 'I' ){
										if( at(str,i+8) == 'O' ){
											if( at(str,i+9) == 'N' ){
												res = Tok_SDFVERSION; i += 10;
											}
										}
									}
								}
							}
						}
					}
				}
				break;
			case 'E':
				if( at(str,i+2) == 'T' ){
					if( at(str,i+3) == 'U' ){
						if( at(str,i+4) == 'P' ){
							if( at(str,i+5) == 'H' ){
								if( at(str,i+6) == 'O' ){
									if( at(str,i+7) == 'L' ){
										if( at(str,i+8) == 'D' ){
											res = Tok_SETUPHOLD; i += 9;
										}
									}
								}
							} else {
								res = Tok_SETUP; i += 5;
							}
						}
					}
				}
				break;
			case 'K':
				if( at(str,i+2) == 'E' ){
					if( at(str,i+3) == 'W' ){
						if( at(str,i+4) == 'C' ){
							if( at(str,i+5) == 'O' ){
								if( at(str,i+6) == 'N' ){
									if( at(str,i+7) == 'S' ){
										if( at(str,i+8) == 'T' ){
											if( at(str,i+9) == 'R' ){
												if( at(str,i+10) == 'A' ){
													if( at(str,i+11) == 'I' ){
														if( at(str,i+12) == 'N' ){
															if( at(str,i+13) == 'T' ){
																res = Tok_SKEWCONSTRAINT; i += 14;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						} else {
							res = Tok_SKEW; i += 4;
						}
					}
				}
				break;
			case 'L':
				if( at(str,i+2) == 'A' ){
					if( at(str,i+3) == 'C' ){
						if( at(str,i+4) == 'K' ){
							res = Tok_SLACK; i += 5;
						}
					}
				}
				break;
			case 'U':
				if( at(str,i+2) == 'M' ){
					res = Tok_SUM; i += 3;
				}
				break;
			}
			break;
		case 'T':
			switch( at(str,i+1) ){
			case 'E':
				if( at(str,i+2) == 'M' ){
					if( at(str,i+3) == 'P' ){
						if( at(str,i+4) == 'E' ){
							if( at(str,i+5) == 'R' ){
								if( at(str,i+6) == 'A' ){
									if( at(str,i+7) == 'T' ){
										if( at(str,i+8) == 'U' ){
											if( at(str,i+9) == 'R' ){
												if( at(str,i+10) == 'E' ){
													res = Tok_TEMPERATURE; i += 11;
												}
											}
										}
									}
								}
							}
						}
					}
				}
				break;
			case 'I':
				if( at(str,i+2) == 'M' ){
					switch( at(str,i+3) ){
					case 'E':
						if( at(str,i+4) == 'S' ){
							if( at(str,i+5) == 'C' ){
								if( at(str,i+6) == 'A' ){
									if( at(str,i+7) == 'L' ){
										if( at(str,i+8) == 'E' ){
											res = Tok_TIMESCALE; i += 9;
										}
									}
								}
							}
						}
						break;
					case 'I':
						if( at(str,i+4) == 'N' ){
							if( at(str,i+5) == 'G' ){
								switch( at(str,i+6) ){
								case 'C':
									if( at(str,i+7) == 'H' ){
										if( at(str,i+8) == 'E' ){
											if( at(str,i+9) == 'C' ){
												if( at(str,i+10) == 'K' ){
													res = Tok_TIMINGCHECK; i += 11;
												}
											}
										}
									}
									break;
								case 'E':
									if( at(str,i+7) == 'N' ){
										if( at(str,i+8) == 'V' ){
											res = Tok_TIMINGENV; i += 9;
										}
									}
									break;
								}
							}
						}
						break;
					}
				}
				break;
			}
			break;
		case 'V':
			switch( at(str,i+1) ){
			case 'E':
				switch( at(str,i+2) ){
				case 'N':
					if( at(str,i+3) == 'D' ){
						if( at(str,i+4) == 'O' ){
							if( at(str,i+5) == 'R' ){
								res = Tok_VENDOR; i += 6;
							}
						}
					}
					break;
				case 'R':
					if( at(str,i+3) == 'S' ){
						if( at(str,i+4) == 'I' ){
							if( at(str,i+5) == 'O' ){
								if( at(str,i+6) == 'N' ){
									res = Tok_VERSION; i += 7;
								}
							}
						}
					}
					break;
				}
				break;
			case 'O':
				if( at(str,i+2) == 'L' ){
					if( at(str,i+3) == 'T' ){
						if( at(str,i+4) == 'A' ){
							if( at(str,i+5) == 'G' ){
								if( at(str,i+6) == 'E' ){
									res = Tok_VOLTAGE; i += 7;
								}
							}
						}
					}
				}
				break;
			}
			break;
		case 'W':
			switch( at(str,i+1) ){
			case 'A':
				if( at(str,i+2) == 'V' ){
					if( at(str,i+3) == 'E' ){
						if( at(str,i+4) == 'F' ){
							if( at(str,i+5) == 'O' ){
								if( at(str,i+6) == 'R' ){
									if( at(str,i+7) == 'M' ){
										res = Tok_WAVEFORM; i += 8;
									}
								}
							}
						}
					}
				}
				break;
			case 'I':
				if( at(str,i+2) == 'D' ){
					if( at(str,i+3) == 'T' ){
						if( at(str,i+4) == 'H' ){
							res = Tok_WIDTH; i += 5;
						}
					}
				}
				break;
			}
			break;
		case '[':
			res = Tok_Lbrack; i += 1;
			break;
		case ']':
			res = Tok_Rbrack; i += 1;
			break;
		case '^':
			if( at(str,i+1) == '~' ){
				res = Tok_HatTilde; i += 2;
			} else {
				res = Tok_Hat; i += 1;
			}
			break;
		case 'n':
			if( at(str,i+1) == 'e' ){
				if( at(str,i+2) == 'g' ){
					if( at(str,i+3) == 'e' ){
						if( at(str,i+4) == 'd' ){
							if( at(str,i+5) == 'g' ){
								if( at(str,i+6) == 'e' ){
									res = Tok_negedge; i += 7;
								}
							}
						}
					}
				}
			}
			break;
		case 'p':
			if( at(str,i+1) == 'o' ){
				if( at(str,i+2) == 's' ){
					if( at(str,i+3) == 'e' ){
						if( at(str,i+4) == 'd' ){
							if( at(str,i+5) == 'g' ){
								if( at(str,i+6) == 'e' ){
									res = Tok_posedge; i += 7;
								}
							}
						}
					}
				}
			}
			break;
		case '|':
			if( at(str,i+1) == '|' ){
				res = Tok_2Bar; i += 2;
			} else {
				res = Tok_Bar; i += 1;
			}
			break;
		case '~':
			switch( at(str,i+1) ){
			case '&':
				res = Tok_TildeAmp; i += 2;
				break;
			case '^':
				res = Tok_TildeHat; i += 2;
				break;
			case '|':
				res = Tok_TildeBar; i += 2;
				break;
			default:
				res = Tok_Tilde; i += 1;
				break;
			}
			break;
		}
		if(pos) *pos = i;
		return res;
	}
}
