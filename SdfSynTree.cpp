// This file was automatically generated by EbnfStudio; don't modify it!
#include "SdfSynTree.h"
using namespace Sdf;

SynTree::SynTree(quint16 r, const Token& t ):d_tok(r){
	d_tok.d_lineNr = t.d_lineNr;
	d_tok.d_colNr = t.d_colNr;
	d_tok.d_sourcePath = t.d_sourcePath;
}

const char* SynTree::rToStr( quint16 r ) {
	switch(r) {
		case R_Sdf: return "Sdf";
		case R_absolute_deltype: return "absolute_deltype";
		case R_arrival_env: return "arrival_env";
		case R_bidirectskew_timing_check: return "bidirectskew_timing_check";
		case R_binary_operator: return "binary_operator";
		case R_bus_net_: return "bus_net";
		case R_bus_port_: return "bus_port";
		case R_ccond: return "ccond";
		case R_cell: return "cell";
		case R_cell_instance: return "cell_instance";
		case R_celltype: return "celltype";
		case R_comment__: return "comment_";
		case R_concat_expression: return "concat_expression";
		case R_cond_def: return "cond_def";
		case R_condelse_def: return "condelse_def";
		case R_conditional_port_expr: return "conditional_port_expr";
		case R_conditional_port_expr_nlr_: return "conditional_port_expr_nlr_";
		case R_constraint_path: return "constraint_path";
		case R_date: return "date";
		case R_del_spec: return "del_spec";
		case R_delay_file: return "delay_file";
		case R_delval: return "delval";
		case R_delval_list: return "delval_list";
		case R_departure_env: return "departure_env";
		case R_design_name: return "design_name";
		case R_device_def: return "device_def";
		case R_diff_constraint: return "diff_constraint";
		case R_edge_identifier: return "edge_identifier";
		case R_edge_list: return "edge_list";
		case R_equality_operator: return "equality_operator";
		case R_exception: return "exception";
		case R_hchar: return "hchar";
		case R_hierarchical_identifier: return "hierarchical_identifier";
		case R_hierarchy_divider: return "hierarchy_divider";
		case R_hold_timing_check: return "hold_timing_check";
		case R_identifier: return "identifier";
		case R_increment_deltype: return "increment_deltype";
		case R_input_output_path: return "input_output_path";
		case R_integer: return "integer";
		case R_interconnect_def: return "interconnect_def";
		case R_inversion_operator: return "inversion_operator";
		case R_iopath_def: return "iopath_def";
		case R_lbl_def: return "lbl_def";
		case R_lbl_spec: return "lbl_spec";
		case R_lbl_type: return "lbl_type";
		case R_name: return "name";
		case R_neg_pair_: return "neg_pair";
		case R_net_: return "net";
		case R_net_instance_: return "net_instance";
		case R_net_spec: return "net_spec";
		case R_netdelay_def: return "netdelay_def";
		case R_nochange_timing_check: return "nochange_timing_check";
		case R_path_constraint: return "path_constraint";
		case R_pathpulse_deltype: return "pathpulse_deltype";
		case R_pathpulsepercent_deltype: return "pathpulsepercent_deltype";
		case R_period_constraint: return "period_constraint";
		case R_period_timing_check: return "period_timing_check";
		case R_port: return "port";
		case R_port_def: return "port_def";
		case R_port_edge: return "port_edge";
		case R_port_instance: return "port_instance";
		case R_port_or_net_: return "port_or_net_";
		case R_port_spec: return "port_spec";
		case R_port_tchk: return "port_tchk";
		case R_pos_or_neg_pair_: return "pos_or_neg_pair_";
		case R_pos_pair_: return "pos_pair";
		case R_process: return "process";
		case R_program_name: return "program_name";
		case R_program_version: return "program_version";
		case R_qstring: return "qstring";
		case R_real_number: return "real_number";
		case R_recovery_timing_check: return "recovery_timing_check";
		case R_recrem_timing_check: return "recrem_timing_check";
		case R_removal_timing_check: return "removal_timing_check";
		case R_retain_def: return "retain_def";
		case R_retval_list: return "retval_list";
		case R_rnumber_or_rtriple_: return "rnumber_or_rtriple_";
		case R_rtriple_: return "rtriple";
		case R_rvalue: return "rvalue";
		case R_scalar_constant: return "scalar_constant";
		case R_scalar_net_: return "scalar_net";
		case R_scalar_node: return "scalar_node";
		case R_scalar_port_: return "scalar_port";
		case R_scond: return "scond";
		case R_sdf_header: return "sdf_header";
		case R_sdf_version: return "sdf_version";
		case R_setup_timing_check: return "setup_timing_check";
		case R_setuphold_timing_check: return "setuphold_timing_check";
		case R_sign: return "sign";
		case R_signed_real_number: return "signed_real_number";
		case R_skew_constraint: return "skew_constraint";
		case R_skew_timing_check: return "skew_timing_check";
		case R_slack_env: return "slack_env";
		case R_sum_constraint: return "sum_constraint";
		case R_tc_spec: return "tc_spec";
		case R_te_def: return "te_def";
		case R_te_spec: return "te_spec";
		case R_temperature: return "temperature";
		case R_time_scale: return "time_scale";
		case R_timescale_number: return "timescale_number";
		case R_timescale_unit: return "timescale_unit";
		case R_timing_check_condition: return "timing_check_condition";
		case R_triple_: return "triple";
		case R_unary_operator: return "unary_operator";
		case R_value: return "value";
		case R_vendor: return "vendor";
		case R_voltage: return "voltage";
		case R_waveform_env: return "waveform_env";
		case R_width_timing_check: return "width_timing_check";
	default: if(r<R_First) return tokenTypeName(r); else return "";
}
}
