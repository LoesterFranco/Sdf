#ifndef __SDF_SYNTREE__
#define __SDF_SYNTREE__
// This file was automatically generated by EbnfStudio; don't modify it!

#include <Sdf/SdfTokenType.h>
#include <Sdf/SdfToken.h>
#include <QList>

namespace Sdf {

	struct SynTree {
		enum ParserRule {
			R_First = TT_Max + 1,
			R_Sdf,
			R_absolute_deltype,
			R_arrival_env,
			R_bidirectskew_timing_check,
			R_binary_operator,
			R_bus_net_,
			R_bus_port_,
			R_ccond,
			R_cell,
			R_cell_instance,
			R_celltype,
			R_comment__,
			R_concat_expression,
			R_cond_def,
			R_condelse_def,
			R_conditional_port_expr,
			R_conditional_port_expr_nlr_,
			R_constraint_path,
			R_date,
			R_del_spec,
			R_delay_file,
			R_delval,
			R_delval_list,
			R_departure_env,
			R_design_name,
			R_device_def,
			R_diff_constraint,
			R_edge_identifier,
			R_edge_list,
			R_equality_operator,
			R_exception,
			R_hchar,
			R_hierarchical_identifier,
			R_hierarchy_divider,
			R_hold_timing_check,
			R_identifier,
			R_increment_deltype,
			R_input_output_path,
			R_integer,
			R_interconnect_def,
			R_inversion_operator,
			R_iopath_def,
			R_lbl_def,
			R_lbl_spec,
			R_lbl_type,
			R_name,
			R_neg_pair_,
			R_net_,
			R_net_instance_,
			R_net_spec,
			R_netdelay_def,
			R_nochange_timing_check,
			R_path_constraint,
			R_pathpulse_deltype,
			R_pathpulsepercent_deltype,
			R_period_constraint,
			R_period_timing_check,
			R_port,
			R_port_def,
			R_port_edge,
			R_port_instance,
			R_port_or_net_,
			R_port_spec,
			R_port_tchk,
			R_pos_or_neg_pair_,
			R_pos_pair_,
			R_process,
			R_program_name,
			R_program_version,
			R_qstring,
			R_real_number,
			R_recovery_timing_check,
			R_recrem_timing_check,
			R_removal_timing_check,
			R_retain_def,
			R_retval_list,
			R_rnumber_or_rtriple_,
			R_rtriple_,
			R_rvalue,
			R_scalar_constant,
			R_scalar_net_,
			R_scalar_node,
			R_scalar_port_,
			R_scond,
			R_sdf_header,
			R_sdf_version,
			R_setup_timing_check,
			R_setuphold_timing_check,
			R_sign,
			R_signed_real_number,
			R_skew_constraint,
			R_skew_timing_check,
			R_slack_env,
			R_sum_constraint,
			R_tc_spec,
			R_te_def,
			R_te_spec,
			R_temperature,
			R_time_scale,
			R_timescale_number,
			R_timescale_unit,
			R_timing_check_condition,
			R_triple_,
			R_unary_operator,
			R_value,
			R_vendor,
			R_voltage,
			R_waveform_env,
			R_width_timing_check,
			R_Last
		};
		SynTree(quint16 r = Tok_Invalid, const Token& = Token() );
		SynTree(const Token& t ):d_tok(t){}
		~SynTree() { foreach(SynTree* n, d_children) delete n; }

		static const char* rToStr( quint16 r );

		Sdf::Token d_tok;
		QList<SynTree*> d_children;
	};

}
#endif // __SDF_SYNTREE__
